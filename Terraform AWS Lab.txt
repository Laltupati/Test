provider "aws" {
  region = "us-west-2"
}

resource "aws_instance" "test2" {
  ami           = "ami-0663b059c6536cac8"
  instance_type = "t2.micro"

  tags = {
    name = "My-Test-Vm"
  }
}



grafana                                  | greengrass
greengrassv2                             | groundstation
guardduty                                | health
healthlake                               | honeycode
iam                                      | identitystore
imagebuilder                             | importexport
inspector                                | inspector-scan
inspector2                               | internetmonitor
iot                                      | iot-data
iot-jobs-data                            | iot1click-devices
iot1click-projects                       | iotanalytics
iotdeviceadvisor                         | iotevents
iotevents-data                           | iotfleethub
iotfleetwise                             | iotsecuretunneling
iotsitewise                              | iotthingsgraph
iottwinmaker                             | iotwireless
ivs                                      | ivs-realtime
ivschat                                  | kafka
kafkaconnect                             | kendra
kendra-ranking                           | keyspaces
kinesis                                  | kinesis-video-archived-media
kinesis-video-media                      | kinesis-video-signaling
kinesis-video-webrtc-storage             | kinesisanalytics
kinesisanalyticsv2                       | kinesisvideo
kms                                      | lakeformation
lambda                                   | launch-wizard
lex-models                               | lex-runtime
lexv2-models                             | lexv2-runtime
license-manager                          | license-manager-linux-subscriptions
license-manager-user-subscriptions       | lightsail
location                                 | logs
lookoutequipment                         | lookoutmetrics
lookoutvision                            | m2
machinelearning                          | macie2
managedblockchain                        | managedblockchain-query
marketplace-agreement                    | marketplace-catalog
marketplace-deployment                   | marketplace-entitlement
marketplacecommerceanalytics             | mediaconnect
mediaconvert                             | medialive
mediapackage                             | mediapackage-vod
mediapackagev2                           | mediastore
mediastore-data                          | mediatailor
medical-imaging                          | memorydb
meteringmarketplace                      | mgh
mgn                                      | migration-hub-refactor-spaces
migrationhub-config                      | migrationhuborchestrator
migrationhubstrategy                     | mobile
mq                                       | mturk
mwaa                                     | neptune
neptune-graph                            | neptunedata
network-firewall                         | networkmanager
networkmonitor                           | nimble
oam                                      | omics
opensearch                               | opensearchserverless
opsworks                                 | opsworkscm
organizations                            | osis
outposts                                 | panorama
payment-cryptography                     | payment-cryptography-data
pca-connector-ad                         | personalize
personalize-events                       | personalize-runtime
pi                                       | pinpoint
pinpoint-email                           | pinpoint-sms-voice
pinpoint-sms-voice-v2                    | pipes
polly                                    | pricing
privatenetworks                          | proton
qbusiness                                | qconnect
qldb                                     | qldb-session
quicksight                               | ram
rbin                                     | rds
rds-data                                 | redshift
redshift-data                            | redshift-serverless
rekognition                              | repostspace
resiliencehub                            | resource-explorer-2
resource-groups                          | resourcegroupstaggingapi
robomaker                                | rolesanywhere
route53                                  | route53-recovery-cluster
route53-recovery-control-config          | route53-recovery-readiness
route53domains                           | route53resolver
rum                                      | s3control
s3outposts                               | sagemaker
sagemaker-a2i-runtime                    | sagemaker-edge
sagemaker-featurestore-runtime           | sagemaker-geospatial
sagemaker-metrics                        | sagemaker-runtime
savingsplans                             | scheduler
schemas                                  | sdb
secretsmanager                           | securityhub
securitylake                             | serverlessrepo
service-quotas                           | servicecatalog
servicecatalog-appregistry               | servicediscovery
ses                                      | sesv2
shield                                   | signer
simspaceweaver                           | sms
snow-device-management                   | snowball
sns                                      | sqs
ssm                                      | ssm-contacts
ssm-incidents                            | ssm-sap
sso                                      | sso-admin
sso-oidc                                 | stepfunctions
storagegateway                           | sts
supplychain                              | support
support-app                              | swf
synthetics                               | textract
timestream-influxdb                      | timestream-query
timestream-write                         | tnb
transcribe                               | transfer
translate                                | trustedadvisor
verifiedpermissions                      | voice-id
vpc-lattice                              | waf
waf-regional                             | wafv2
wellarchitected                          | wisdom
workdocs                                 | worklink
workmail                                 | workmailmessageflow
workspaces                               | workspaces-thin-client
workspaces-web                           | xray
s3api                                    | s3
ddb                                      | configure
deploy                                   | configservice
opsworks-cm                              | history
cli-dev                                  | help

PS C:\Users\laltu.pati\Terraform> terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.46.0...
- Installed hashicorp/aws v5.46.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS C:\Users\laltu.pati\Terraform> terraform fmt 
main.tf
PS C:\Users\laltu.pati\Terraform> terraform validate
Success! The configuration is valid.

PS C:\Users\laltu.pati\Terraform> terraform plan    

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the  
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.instance1 will be created
  + resource "aws_instance" "instance1" {
      + ami                                  = "ami-04e5276ebb8451442"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if    
you run "terraform apply" now.
PS C:\Users\laltu.pati\Terraform> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the  
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.instance1 will be created
  + resource "aws_instance" "instance1" {
      + ami                                  = "ami-04e5276ebb8451442"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.instance1: Creating...
╷
│ Error: creating EC2 Instance: InvalidAMIID.NotFound: The image id '[ami-04e5276ebb8451442]' does not exist
│       status code: 400, request id: 55e7acc5-20ee-4b03-8bb5-1f8f92b034cb
│
│   with aws_instance.instance1,
│   on main.tf line 5, in resource "aws_instance" "instance1":
│    5: resource "aws_instance" "instance1" {
│
╵
PS C:\Users\laltu.pati\Terraform> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the  
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.instance1 will be created
  + resource "aws_instance" "instance1" {
      + ami                                  = "ami-04e5276ebb8451442"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.instance1: Creating...
╷
│ Error: creating EC2 Instance: InvalidAMIID.NotFound: The image id '[ami-04e5276ebb8451442]' does not exist
│       status code: 400, request id: 1be876b7-88da-4ba8-8d4e-0415afbe9b71
│
│   with aws_instance.instance1,
│   on main.tf line 5, in resource "aws_instance" "instance1":
│    5: resource "aws_instance" "instance1" {
│
╵
PS C:\Users\laltu.pati\Terraform> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the  
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.instance1 will be created
  + resource "aws_instance" "instance1" {
      + ami                                  = "ami-04e5276ebb8451442"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.instance1: Creating...
╷
│ Error: creating EC2 Instance: InvalidAMIID.NotFound: The image id '[ami-04e5276ebb8451442]' does not exist
│       status code: 400, request id: b2f233e7-8d4f-4008-9aad-deab8c089488
│
│   with aws_instance.instance1,
│   on main.tf line 5, in resource "aws_instance" "instance1":
│    5: resource "aws_instance" "instance1" {
│
╵
PS C:\Users\laltu.pati\Terraform> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the  
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.instance1 will be created
  + resource "aws_instance" "instance1" {
      + ami                                  = "ami-0a1179631ec8933d7"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.instance1: Creating...
╷
│ Error: creating EC2 Instance: InvalidAMIID.NotFound: The image id '[ami-0a1179631ec8933d7]' does not exist
│       status code: 400, request id: 2729a738-0558-4bce-8dc2-cfd0bf1e6754
│
│   with aws_instance.instance1,
│   on main.tf line 5, in resource "aws_instance" "instance1":
│    5: resource "aws_instance" "instance1" {
│
╵
PS C:\Users\laltu.pati\Terraform> terraform init    

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.46.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS C:\Users\laltu.pati\Terraform> terraform fmt     
main.tf
PS C:\Users\laltu.pati\Terraform> terraform validate
Success! The configuration is valid.

PS C:\Users\laltu.pati\Terraform> terraform plan    

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the  
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.test2 will be created
  + resource "aws_instance" "test2" {
      + ami                                  = "ami-0a1179631ec8933d7"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if    
you run "terraform apply" now.
PS C:\Users\laltu.pati\Terraform> terraform apply   

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the  
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.test2 will be created
  + resource "aws_instance" "test2" {
      + ami                                  = "ami-0a1179631ec8933d7"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.test2: Creating...
╷
│ Error: creating EC2 Instance: InvalidAMIID.NotFound: The image id '[ami-0a1179631ec8933d7]' does not exist
│       status code: 400, request id: 39907db2-2e8a-4018-83e8-fd5a2fb96b55
│
│   with aws_instance.test2,
│   on main.tf line 5, in resource "aws_instance" "test2":
│    5: resource "aws_instance" "test2" {
│
╵
PS C:\Users\laltu.pati\Terraform> terraform init    

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.46.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS C:\Users\laltu.pati\Terraform> terraform fmt     
main.tf
PS C:\Users\laltu.pati\Terraform> terraform validate
Success! The configuration is valid.

PS C:\Users\laltu.pati\Terraform> terraform plan    

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the        
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.test2 will be created
  + resource "aws_instance" "test2" {
      + ami                                  = "ami-0663b059c6536cac8"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run  
"terraform apply" now.
PS C:\Users\laltu.pati\Terraform> terraform apply   

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the        
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.test2 will be created
  + resource "aws_instance" "test2" {
      + ami                                  = "ami-0663b059c6536cac8"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.test2: Creating...
╷
│ Error: creating EC2 Instance: UnauthorizedOperation: You are not authorized to perform this operation. User: arn:aws:iam::012175321567:user/Test1 is not authorized to perform: ec2:RunInstances on resource: arn:aws:ec2:us-west-2:012175321567:instance/* because no identity-based policy allows the ec2:RunInstances action. Encoded authorization failure message: cDX1EqFkHyMVQg-jeHV_zfvvFKNzjYpvnfznlAUeeTsHhZ54h0kN7AN1G_5wX2FLQWbT6uSAIKlOt7Lh3oHOh6fFZ8LNQRzxVBzWuwDY1ulmFJXSrkTYsWKX9hrqJemn3WD6EKhjxTfvmD8fsmbKzee9QyrXypQe1SHcWs0tAjXU2D9SBGE8Vst4kqmyoJGOLvFwp2rFD15_wLLLLU4styGfzYr_rCoLTLnarpGobpawhs1j6BM4DTQYDV0sjxg4hVVFVq1nFxADM3cfvGrB9kUvi_4PtJBUXWJPTlUUH-pv80td4Gsd3RELekzffkFg9nr9A89LPif6rMfELgjsVdeuJcen1_mH2elddjP9rN0R2tWyrIPWx_Gra0GTyBugwVrb2P5L0LQH5rqgzx5hkjMDQmuP9Lhf_2-Wn4w14PYGuNTvhc4q8SAleuQuaR_tTNQ7DeRFCLIYTIInRUoiADwl45D1zcBn35EcVfZhBWANaBEXdOvcPnEOOjr3_TnjtuZeOE2tK_1mN-00DG-TXEREawKvw17TDYrGln_A_EVtlU4sIn5fCUDvvcW8blBzBb8achhh9CrpJiZ8xCIJ49Ciqf-mwi-76UfS0dNW1DZlxMX6C1P9sJlZ0E-8H39Qa4GFsVPYwWFvaFOA-UJ06loi8-z6jOUX5Sw-Xo2GnYhF6SGxkHshRpYhLyKxw9bGvB3pm1whgnKrIo45IlTD1CxUj9dkfTID_7-iq7WwxPxZEeT10vMlE_zxeH9K
│       status code: 403, request id: 03df258a-e26c-46d1-8da2-b450cb7bb990
│
│   with aws_instance.test2,
│   on main.tf line 5, in resource "aws_instance" "test2":
│    5: resource "aws_instance" "test2" {
│
╵
PS C:\Users\laltu.pati\Terraform> terraform init    

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.46.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS C:\Users\laltu.pati\Terraform> terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the        
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.test2 will be created
  + resource "aws_instance" "test2" {
      + ami                                  = "ami-0663b059c6536cac8"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run  
"terraform apply" now.
PS C:\Users\laltu.pati\Terraform> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the        
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.test2 will be created
  + resource "aws_instance" "test2" {
      + ami                                  = "ami-0663b059c6536cac8"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "name" = "My-Test-Vm"
        }
      + tags_all                             = {
          + "name" = "My-Test-Vm"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.test2: Creating...
aws_instance.test2: Still creating... [10s elapsed]
aws_instance.test2: Still creating... [20s elapsed]
aws_instance.test2: Still creating... [30s elapsed]
aws_instance.test2: Creation complete after 37s [id=i-0e273e9e0d16340c6]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
PS C:\Users\laltu.pati\Terraform> 


PS C:\Users\laltu.pati\Terraform> terraform destroy
aws_instance.test2: Refreshing state... [id=i-0e273e9e0d16340c6]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the        
following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.test2 will be destroyed
  - resource "aws_instance" "test2" {
      - ami                                  = "ami-0663b059c6536cac8" -> null
      - arn                                  = "arn:aws:ec2:us-west-2:012175321567:instance/i-0e273e9e0d16340c6" -> null       
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-west-2a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0e273e9e0d16340c6" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-096daddb8c59417fc" -> null
      - private_dns                          = "ip-172-31-17-57.us-west-2.compute.internal" -> null
      - private_ip                           = "172.31.17.57" -> null
      - public_dns                           = "ec2-34-222-122-163.us-west-2.compute.amazonaws.com" -> null
      - public_ip                            = "34.222.122.163" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "default",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-d7b5a0b0" -> null
      - tags                                 = {
          - "name" = "My-Test-Vm"
        } -> null
      - tags_all                             = {
          - "name" = "My-Test-Vm"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-5b8b4c21",
        ] -> null
        # (8 unchanged attributes hidden)

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
            # (1 unchanged attribute hidden)
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-0461c6cc4c81715ef" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
            # (1 unchanged attribute hidden)
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_instance.test2: Destroying... [id=i-0e273e9e0d16340c6]
aws_instance.test2: Still destroying... [id=i-0e273e9e0d16340c6, 10s elapsed]
aws_instance.test2: Still destroying... [id=i-0e273e9e0d16340c6, 20s elapsed]
aws_instance.test2: Still destroying... [id=i-0e273e9e0d16340c6, 30s elapsed]
aws_instance.test2: Still destroying... [id=i-0e273e9e0d16340c6, 40s elapsed]
aws_instance.test2: Destruction complete after 43s

Destroy complete! Resources: 1 destroyed.
PS C:\Users\laltu.pati\Terraform> 

